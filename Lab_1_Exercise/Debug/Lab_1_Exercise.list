
Lab_1_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001970  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001a7c  08001a7c  00002a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001aa0  08001aa0  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001aa0  08001aa0  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001aa0  08001aa0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001aa0  08001aa0  00002aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001aa4  08001aa4  00002aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001aa8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001ab4  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001ab4  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000028c2  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e3a  00000000  00000000  000058f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e0  00000000  00000000  00006738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002c7  00000000  00000000  00006b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015672  00000000  00000000  00006ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004b4d  00000000  00000000  0001c451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079c46  00000000  00000000  00020f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009abe4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d80  00000000  00000000  0009ac28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0009b9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a64 	.word	0x08001a64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001a64 	.word	0x08001a64

0800014c <display7SEG>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void display7SEG(int num)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	// Kiểm tra giá trị hợp lệ để tránh access violation
	if (num < 0) num = 0;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	da01      	bge.n	800015e <display7SEG+0x12>
 800015a:	2300      	movs	r3, #0
 800015c:	607b      	str	r3, [r7, #4]
	if (num > 9) num = 9;
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	2b09      	cmp	r3, #9
 8000162:	dd01      	ble.n	8000168 <display7SEG+0x1c>
 8000164:	2309      	movs	r3, #9
 8000166:	607b      	str	r3, [r7, #4]

	if (num == 0)
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2b00      	cmp	r3, #0
 800016c:	d122      	bne.n	80001b4 <display7SEG+0x68>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 800016e:	2200      	movs	r2, #0
 8000170:	2101      	movs	r1, #1
 8000172:	48bd      	ldr	r0, [pc, #756]	@ (8000468 <display7SEG+0x31c>)
 8000174:	f001 f854 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 8000178:	2200      	movs	r2, #0
 800017a:	2102      	movs	r1, #2
 800017c:	48ba      	ldr	r0, [pc, #744]	@ (8000468 <display7SEG+0x31c>)
 800017e:	f001 f84f 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 8000182:	2200      	movs	r2, #0
 8000184:	2104      	movs	r1, #4
 8000186:	48b8      	ldr	r0, [pc, #736]	@ (8000468 <display7SEG+0x31c>)
 8000188:	f001 f84a 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 800018c:	2200      	movs	r2, #0
 800018e:	2108      	movs	r1, #8
 8000190:	48b5      	ldr	r0, [pc, #724]	@ (8000468 <display7SEG+0x31c>)
 8000192:	f001 f845 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_RESET ) ;
 8000196:	2200      	movs	r2, #0
 8000198:	2110      	movs	r1, #16
 800019a:	48b3      	ldr	r0, [pc, #716]	@ (8000468 <display7SEG+0x31c>)
 800019c:	f001 f840 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 80001a0:	2200      	movs	r2, #0
 80001a2:	2120      	movs	r1, #32
 80001a4:	48b0      	ldr	r0, [pc, #704]	@ (8000468 <display7SEG+0x31c>)
 80001a6:	f001 f83b 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_SET ) ;
 80001aa:	2201      	movs	r2, #1
 80001ac:	2140      	movs	r1, #64	@ 0x40
 80001ae:	48ae      	ldr	r0, [pc, #696]	@ (8000468 <display7SEG+0x31c>)
 80001b0:	f001 f836 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 1)
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2b01      	cmp	r3, #1
 80001b8:	d122      	bne.n	8000200 <display7SEG+0xb4>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_SET ) ;
 80001ba:	2201      	movs	r2, #1
 80001bc:	2101      	movs	r1, #1
 80001be:	48aa      	ldr	r0, [pc, #680]	@ (8000468 <display7SEG+0x31c>)
 80001c0:	f001 f82e 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 80001c4:	2200      	movs	r2, #0
 80001c6:	2102      	movs	r1, #2
 80001c8:	48a7      	ldr	r0, [pc, #668]	@ (8000468 <display7SEG+0x31c>)
 80001ca:	f001 f829 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 80001ce:	2200      	movs	r2, #0
 80001d0:	2104      	movs	r1, #4
 80001d2:	48a5      	ldr	r0, [pc, #660]	@ (8000468 <display7SEG+0x31c>)
 80001d4:	f001 f824 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_SET ) ;
 80001d8:	2201      	movs	r2, #1
 80001da:	2108      	movs	r1, #8
 80001dc:	48a2      	ldr	r0, [pc, #648]	@ (8000468 <display7SEG+0x31c>)
 80001de:	f001 f81f 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 80001e2:	2201      	movs	r2, #1
 80001e4:	2110      	movs	r1, #16
 80001e6:	48a0      	ldr	r0, [pc, #640]	@ (8000468 <display7SEG+0x31c>)
 80001e8:	f001 f81a 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_SET ) ;
 80001ec:	2201      	movs	r2, #1
 80001ee:	2120      	movs	r1, #32
 80001f0:	489d      	ldr	r0, [pc, #628]	@ (8000468 <display7SEG+0x31c>)
 80001f2:	f001 f815 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_SET ) ;
 80001f6:	2201      	movs	r2, #1
 80001f8:	2140      	movs	r1, #64	@ 0x40
 80001fa:	489b      	ldr	r0, [pc, #620]	@ (8000468 <display7SEG+0x31c>)
 80001fc:	f001 f810 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 2)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2b02      	cmp	r3, #2
 8000204:	d122      	bne.n	800024c <display7SEG+0x100>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 8000206:	2200      	movs	r2, #0
 8000208:	2101      	movs	r1, #1
 800020a:	4897      	ldr	r0, [pc, #604]	@ (8000468 <display7SEG+0x31c>)
 800020c:	f001 f808 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 8000210:	2200      	movs	r2, #0
 8000212:	2102      	movs	r1, #2
 8000214:	4894      	ldr	r0, [pc, #592]	@ (8000468 <display7SEG+0x31c>)
 8000216:	f001 f803 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_SET ) ;
 800021a:	2201      	movs	r2, #1
 800021c:	2104      	movs	r1, #4
 800021e:	4892      	ldr	r0, [pc, #584]	@ (8000468 <display7SEG+0x31c>)
 8000220:	f000 fffe 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 8000224:	2200      	movs	r2, #0
 8000226:	2108      	movs	r1, #8
 8000228:	488f      	ldr	r0, [pc, #572]	@ (8000468 <display7SEG+0x31c>)
 800022a:	f000 fff9 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_RESET ) ;
 800022e:	2200      	movs	r2, #0
 8000230:	2110      	movs	r1, #16
 8000232:	488d      	ldr	r0, [pc, #564]	@ (8000468 <display7SEG+0x31c>)
 8000234:	f000 fff4 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_SET ) ;
 8000238:	2201      	movs	r2, #1
 800023a:	2120      	movs	r1, #32
 800023c:	488a      	ldr	r0, [pc, #552]	@ (8000468 <display7SEG+0x31c>)
 800023e:	f000 ffef 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 8000242:	2200      	movs	r2, #0
 8000244:	2140      	movs	r1, #64	@ 0x40
 8000246:	4888      	ldr	r0, [pc, #544]	@ (8000468 <display7SEG+0x31c>)
 8000248:	f000 ffea 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 3)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2b03      	cmp	r3, #3
 8000250:	d122      	bne.n	8000298 <display7SEG+0x14c>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 8000252:	2200      	movs	r2, #0
 8000254:	2101      	movs	r1, #1
 8000256:	4884      	ldr	r0, [pc, #528]	@ (8000468 <display7SEG+0x31c>)
 8000258:	f000 ffe2 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 800025c:	2200      	movs	r2, #0
 800025e:	2102      	movs	r1, #2
 8000260:	4881      	ldr	r0, [pc, #516]	@ (8000468 <display7SEG+0x31c>)
 8000262:	f000 ffdd 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 8000266:	2200      	movs	r2, #0
 8000268:	2104      	movs	r1, #4
 800026a:	487f      	ldr	r0, [pc, #508]	@ (8000468 <display7SEG+0x31c>)
 800026c:	f000 ffd8 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 8000270:	2200      	movs	r2, #0
 8000272:	2108      	movs	r1, #8
 8000274:	487c      	ldr	r0, [pc, #496]	@ (8000468 <display7SEG+0x31c>)
 8000276:	f000 ffd3 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 800027a:	2201      	movs	r2, #1
 800027c:	2110      	movs	r1, #16
 800027e:	487a      	ldr	r0, [pc, #488]	@ (8000468 <display7SEG+0x31c>)
 8000280:	f000 ffce 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_SET ) ;
 8000284:	2201      	movs	r2, #1
 8000286:	2120      	movs	r1, #32
 8000288:	4877      	ldr	r0, [pc, #476]	@ (8000468 <display7SEG+0x31c>)
 800028a:	f000 ffc9 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 800028e:	2200      	movs	r2, #0
 8000290:	2140      	movs	r1, #64	@ 0x40
 8000292:	4875      	ldr	r0, [pc, #468]	@ (8000468 <display7SEG+0x31c>)
 8000294:	f000 ffc4 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 4)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b04      	cmp	r3, #4
 800029c:	d122      	bne.n	80002e4 <display7SEG+0x198>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_SET ) ;
 800029e:	2201      	movs	r2, #1
 80002a0:	2101      	movs	r1, #1
 80002a2:	4871      	ldr	r0, [pc, #452]	@ (8000468 <display7SEG+0x31c>)
 80002a4:	f000 ffbc 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 80002a8:	2200      	movs	r2, #0
 80002aa:	2102      	movs	r1, #2
 80002ac:	486e      	ldr	r0, [pc, #440]	@ (8000468 <display7SEG+0x31c>)
 80002ae:	f000 ffb7 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 80002b2:	2200      	movs	r2, #0
 80002b4:	2104      	movs	r1, #4
 80002b6:	486c      	ldr	r0, [pc, #432]	@ (8000468 <display7SEG+0x31c>)
 80002b8:	f000 ffb2 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_SET ) ;
 80002bc:	2201      	movs	r2, #1
 80002be:	2108      	movs	r1, #8
 80002c0:	4869      	ldr	r0, [pc, #420]	@ (8000468 <display7SEG+0x31c>)
 80002c2:	f000 ffad 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 80002c6:	2201      	movs	r2, #1
 80002c8:	2110      	movs	r1, #16
 80002ca:	4867      	ldr	r0, [pc, #412]	@ (8000468 <display7SEG+0x31c>)
 80002cc:	f000 ffa8 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 80002d0:	2200      	movs	r2, #0
 80002d2:	2120      	movs	r1, #32
 80002d4:	4864      	ldr	r0, [pc, #400]	@ (8000468 <display7SEG+0x31c>)
 80002d6:	f000 ffa3 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 80002da:	2200      	movs	r2, #0
 80002dc:	2140      	movs	r1, #64	@ 0x40
 80002de:	4862      	ldr	r0, [pc, #392]	@ (8000468 <display7SEG+0x31c>)
 80002e0:	f000 ff9e 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 5)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b05      	cmp	r3, #5
 80002e8:	d122      	bne.n	8000330 <display7SEG+0x1e4>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 80002ea:	2200      	movs	r2, #0
 80002ec:	2101      	movs	r1, #1
 80002ee:	485e      	ldr	r0, [pc, #376]	@ (8000468 <display7SEG+0x31c>)
 80002f0:	f000 ff96 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_SET ) ;
 80002f4:	2201      	movs	r2, #1
 80002f6:	2102      	movs	r1, #2
 80002f8:	485b      	ldr	r0, [pc, #364]	@ (8000468 <display7SEG+0x31c>)
 80002fa:	f000 ff91 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 80002fe:	2200      	movs	r2, #0
 8000300:	2104      	movs	r1, #4
 8000302:	4859      	ldr	r0, [pc, #356]	@ (8000468 <display7SEG+0x31c>)
 8000304:	f000 ff8c 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 8000308:	2200      	movs	r2, #0
 800030a:	2108      	movs	r1, #8
 800030c:	4856      	ldr	r0, [pc, #344]	@ (8000468 <display7SEG+0x31c>)
 800030e:	f000 ff87 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 8000312:	2201      	movs	r2, #1
 8000314:	2110      	movs	r1, #16
 8000316:	4854      	ldr	r0, [pc, #336]	@ (8000468 <display7SEG+0x31c>)
 8000318:	f000 ff82 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 800031c:	2200      	movs	r2, #0
 800031e:	2120      	movs	r1, #32
 8000320:	4851      	ldr	r0, [pc, #324]	@ (8000468 <display7SEG+0x31c>)
 8000322:	f000 ff7d 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 8000326:	2200      	movs	r2, #0
 8000328:	2140      	movs	r1, #64	@ 0x40
 800032a:	484f      	ldr	r0, [pc, #316]	@ (8000468 <display7SEG+0x31c>)
 800032c:	f000 ff78 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 6)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2b06      	cmp	r3, #6
 8000334:	d122      	bne.n	800037c <display7SEG+0x230>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 8000336:	2200      	movs	r2, #0
 8000338:	2101      	movs	r1, #1
 800033a:	484b      	ldr	r0, [pc, #300]	@ (8000468 <display7SEG+0x31c>)
 800033c:	f000 ff70 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_SET ) ;
 8000340:	2201      	movs	r2, #1
 8000342:	2102      	movs	r1, #2
 8000344:	4848      	ldr	r0, [pc, #288]	@ (8000468 <display7SEG+0x31c>)
 8000346:	f000 ff6b 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 800034a:	2200      	movs	r2, #0
 800034c:	2104      	movs	r1, #4
 800034e:	4846      	ldr	r0, [pc, #280]	@ (8000468 <display7SEG+0x31c>)
 8000350:	f000 ff66 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 8000354:	2200      	movs	r2, #0
 8000356:	2108      	movs	r1, #8
 8000358:	4843      	ldr	r0, [pc, #268]	@ (8000468 <display7SEG+0x31c>)
 800035a:	f000 ff61 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_RESET ) ;
 800035e:	2200      	movs	r2, #0
 8000360:	2110      	movs	r1, #16
 8000362:	4841      	ldr	r0, [pc, #260]	@ (8000468 <display7SEG+0x31c>)
 8000364:	f000 ff5c 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 8000368:	2200      	movs	r2, #0
 800036a:	2120      	movs	r1, #32
 800036c:	483e      	ldr	r0, [pc, #248]	@ (8000468 <display7SEG+0x31c>)
 800036e:	f000 ff57 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 8000372:	2200      	movs	r2, #0
 8000374:	2140      	movs	r1, #64	@ 0x40
 8000376:	483c      	ldr	r0, [pc, #240]	@ (8000468 <display7SEG+0x31c>)
 8000378:	f000 ff52 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 7)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2b07      	cmp	r3, #7
 8000380:	d122      	bne.n	80003c8 <display7SEG+0x27c>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 8000382:	2200      	movs	r2, #0
 8000384:	2101      	movs	r1, #1
 8000386:	4838      	ldr	r0, [pc, #224]	@ (8000468 <display7SEG+0x31c>)
 8000388:	f000 ff4a 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 800038c:	2200      	movs	r2, #0
 800038e:	2102      	movs	r1, #2
 8000390:	4835      	ldr	r0, [pc, #212]	@ (8000468 <display7SEG+0x31c>)
 8000392:	f000 ff45 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 8000396:	2200      	movs	r2, #0
 8000398:	2104      	movs	r1, #4
 800039a:	4833      	ldr	r0, [pc, #204]	@ (8000468 <display7SEG+0x31c>)
 800039c:	f000 ff40 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_SET ) ;
 80003a0:	2201      	movs	r2, #1
 80003a2:	2108      	movs	r1, #8
 80003a4:	4830      	ldr	r0, [pc, #192]	@ (8000468 <display7SEG+0x31c>)
 80003a6:	f000 ff3b 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 80003aa:	2201      	movs	r2, #1
 80003ac:	2110      	movs	r1, #16
 80003ae:	482e      	ldr	r0, [pc, #184]	@ (8000468 <display7SEG+0x31c>)
 80003b0:	f000 ff36 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_SET ) ;
 80003b4:	2201      	movs	r2, #1
 80003b6:	2120      	movs	r1, #32
 80003b8:	482b      	ldr	r0, [pc, #172]	@ (8000468 <display7SEG+0x31c>)
 80003ba:	f000 ff31 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_SET ) ;
 80003be:	2201      	movs	r2, #1
 80003c0:	2140      	movs	r1, #64	@ 0x40
 80003c2:	4829      	ldr	r0, [pc, #164]	@ (8000468 <display7SEG+0x31c>)
 80003c4:	f000 ff2c 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 8)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2b08      	cmp	r3, #8
 80003cc:	d122      	bne.n	8000414 <display7SEG+0x2c8>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 80003ce:	2200      	movs	r2, #0
 80003d0:	2101      	movs	r1, #1
 80003d2:	4825      	ldr	r0, [pc, #148]	@ (8000468 <display7SEG+0x31c>)
 80003d4:	f000 ff24 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 80003d8:	2200      	movs	r2, #0
 80003da:	2102      	movs	r1, #2
 80003dc:	4822      	ldr	r0, [pc, #136]	@ (8000468 <display7SEG+0x31c>)
 80003de:	f000 ff1f 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 80003e2:	2200      	movs	r2, #0
 80003e4:	2104      	movs	r1, #4
 80003e6:	4820      	ldr	r0, [pc, #128]	@ (8000468 <display7SEG+0x31c>)
 80003e8:	f000 ff1a 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 80003ec:	2200      	movs	r2, #0
 80003ee:	2108      	movs	r1, #8
 80003f0:	481d      	ldr	r0, [pc, #116]	@ (8000468 <display7SEG+0x31c>)
 80003f2:	f000 ff15 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_RESET ) ;
 80003f6:	2200      	movs	r2, #0
 80003f8:	2110      	movs	r1, #16
 80003fa:	481b      	ldr	r0, [pc, #108]	@ (8000468 <display7SEG+0x31c>)
 80003fc:	f000 ff10 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 8000400:	2200      	movs	r2, #0
 8000402:	2120      	movs	r1, #32
 8000404:	4818      	ldr	r0, [pc, #96]	@ (8000468 <display7SEG+0x31c>)
 8000406:	f000 ff0b 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 800040a:	2200      	movs	r2, #0
 800040c:	2140      	movs	r1, #64	@ 0x40
 800040e:	4816      	ldr	r0, [pc, #88]	@ (8000468 <display7SEG+0x31c>)
 8000410:	f000 ff06 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 9)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2b09      	cmp	r3, #9
 8000418:	d122      	bne.n	8000460 <display7SEG+0x314>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 800041a:	2200      	movs	r2, #0
 800041c:	2101      	movs	r1, #1
 800041e:	4812      	ldr	r0, [pc, #72]	@ (8000468 <display7SEG+0x31c>)
 8000420:	f000 fefe 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 8000424:	2200      	movs	r2, #0
 8000426:	2102      	movs	r1, #2
 8000428:	480f      	ldr	r0, [pc, #60]	@ (8000468 <display7SEG+0x31c>)
 800042a:	f000 fef9 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 800042e:	2200      	movs	r2, #0
 8000430:	2104      	movs	r1, #4
 8000432:	480d      	ldr	r0, [pc, #52]	@ (8000468 <display7SEG+0x31c>)
 8000434:	f000 fef4 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 8000438:	2200      	movs	r2, #0
 800043a:	2108      	movs	r1, #8
 800043c:	480a      	ldr	r0, [pc, #40]	@ (8000468 <display7SEG+0x31c>)
 800043e:	f000 feef 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 8000442:	2201      	movs	r2, #1
 8000444:	2110      	movs	r1, #16
 8000446:	4808      	ldr	r0, [pc, #32]	@ (8000468 <display7SEG+0x31c>)
 8000448:	f000 feea 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 800044c:	2200      	movs	r2, #0
 800044e:	2120      	movs	r1, #32
 8000450:	4805      	ldr	r0, [pc, #20]	@ (8000468 <display7SEG+0x31c>)
 8000452:	f000 fee5 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 8000456:	2200      	movs	r2, #0
 8000458:	2140      	movs	r1, #64	@ 0x40
 800045a:	4803      	ldr	r0, [pc, #12]	@ (8000468 <display7SEG+0x31c>)
 800045c:	f000 fee0 	bl	8001220 <HAL_GPIO_WritePin>
	}
}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40010c00 	.word	0x40010c00

0800046c <display7SEG1>:

void display7SEG1(int num)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	// Kiểm tra giá trị hợp lệ để tránh access violation
	if (num < 0) num = 0;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b00      	cmp	r3, #0
 8000478:	da01      	bge.n	800047e <display7SEG1+0x12>
 800047a:	2300      	movs	r3, #0
 800047c:	607b      	str	r3, [r7, #4]
	if (num > 9) num = 9;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2b09      	cmp	r3, #9
 8000482:	dd01      	ble.n	8000488 <display7SEG1+0x1c>
 8000484:	2309      	movs	r3, #9
 8000486:	607b      	str	r3, [r7, #4]

	if (num == 0)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d128      	bne.n	80004e0 <display7SEG1+0x74>
	{
		HAL_GPIO_WritePin ( a1_GPIO_Port , a1_Pin ,GPIO_PIN_RESET ) ;
 800048e:	2200      	movs	r2, #0
 8000490:	2180      	movs	r1, #128	@ 0x80
 8000492:	48cf      	ldr	r0, [pc, #828]	@ (80007d0 <display7SEG1+0x364>)
 8000494:	f000 fec4 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b1_GPIO_Port , b1_Pin ,GPIO_PIN_RESET ) ;
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800049e:	48cc      	ldr	r0, [pc, #816]	@ (80007d0 <display7SEG1+0x364>)
 80004a0:	f000 febe 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c1_GPIO_Port , c1_Pin ,GPIO_PIN_RESET ) ;
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004aa:	48c9      	ldr	r0, [pc, #804]	@ (80007d0 <display7SEG1+0x364>)
 80004ac:	f000 feb8 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d1_GPIO_Port , d1_Pin ,GPIO_PIN_RESET ) ;
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004b6:	48c6      	ldr	r0, [pc, #792]	@ (80007d0 <display7SEG1+0x364>)
 80004b8:	f000 feb2 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e1_GPIO_Port , e1_Pin ,GPIO_PIN_RESET ) ;
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004c2:	48c3      	ldr	r0, [pc, #780]	@ (80007d0 <display7SEG1+0x364>)
 80004c4:	f000 feac 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f1_GPIO_Port , f1_Pin ,GPIO_PIN_RESET ) ;
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004ce:	48c0      	ldr	r0, [pc, #768]	@ (80007d0 <display7SEG1+0x364>)
 80004d0:	f000 fea6 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g1_GPIO_Port , g1_Pin ,GPIO_PIN_SET ) ;
 80004d4:	2201      	movs	r2, #1
 80004d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004da:	48bd      	ldr	r0, [pc, #756]	@ (80007d0 <display7SEG1+0x364>)
 80004dc:	f000 fea0 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 1)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d128      	bne.n	8000538 <display7SEG1+0xcc>
	{
		HAL_GPIO_WritePin ( a1_GPIO_Port , a1_Pin ,GPIO_PIN_SET ) ;
 80004e6:	2201      	movs	r2, #1
 80004e8:	2180      	movs	r1, #128	@ 0x80
 80004ea:	48b9      	ldr	r0, [pc, #740]	@ (80007d0 <display7SEG1+0x364>)
 80004ec:	f000 fe98 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b1_GPIO_Port , b1_Pin ,GPIO_PIN_RESET ) ;
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004f6:	48b6      	ldr	r0, [pc, #728]	@ (80007d0 <display7SEG1+0x364>)
 80004f8:	f000 fe92 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c1_GPIO_Port , c1_Pin ,GPIO_PIN_RESET ) ;
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000502:	48b3      	ldr	r0, [pc, #716]	@ (80007d0 <display7SEG1+0x364>)
 8000504:	f000 fe8c 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d1_GPIO_Port , d1_Pin ,GPIO_PIN_SET ) ;
 8000508:	2201      	movs	r2, #1
 800050a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800050e:	48b0      	ldr	r0, [pc, #704]	@ (80007d0 <display7SEG1+0x364>)
 8000510:	f000 fe86 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e1_GPIO_Port , e1_Pin ,GPIO_PIN_SET ) ;
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800051a:	48ad      	ldr	r0, [pc, #692]	@ (80007d0 <display7SEG1+0x364>)
 800051c:	f000 fe80 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f1_GPIO_Port , f1_Pin ,GPIO_PIN_SET ) ;
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000526:	48aa      	ldr	r0, [pc, #680]	@ (80007d0 <display7SEG1+0x364>)
 8000528:	f000 fe7a 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g1_GPIO_Port , g1_Pin ,GPIO_PIN_SET ) ;
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000532:	48a7      	ldr	r0, [pc, #668]	@ (80007d0 <display7SEG1+0x364>)
 8000534:	f000 fe74 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 2)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b02      	cmp	r3, #2
 800053c:	d128      	bne.n	8000590 <display7SEG1+0x124>
	{
		HAL_GPIO_WritePin ( a1_GPIO_Port , a1_Pin ,GPIO_PIN_RESET ) ;
 800053e:	2200      	movs	r2, #0
 8000540:	2180      	movs	r1, #128	@ 0x80
 8000542:	48a3      	ldr	r0, [pc, #652]	@ (80007d0 <display7SEG1+0x364>)
 8000544:	f000 fe6c 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b1_GPIO_Port , b1_Pin ,GPIO_PIN_RESET ) ;
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800054e:	48a0      	ldr	r0, [pc, #640]	@ (80007d0 <display7SEG1+0x364>)
 8000550:	f000 fe66 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c1_GPIO_Port , c1_Pin ,GPIO_PIN_SET ) ;
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800055a:	489d      	ldr	r0, [pc, #628]	@ (80007d0 <display7SEG1+0x364>)
 800055c:	f000 fe60 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d1_GPIO_Port , d1_Pin ,GPIO_PIN_RESET ) ;
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000566:	489a      	ldr	r0, [pc, #616]	@ (80007d0 <display7SEG1+0x364>)
 8000568:	f000 fe5a 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e1_GPIO_Port , e1_Pin ,GPIO_PIN_RESET ) ;
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000572:	4897      	ldr	r0, [pc, #604]	@ (80007d0 <display7SEG1+0x364>)
 8000574:	f000 fe54 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f1_GPIO_Port , f1_Pin ,GPIO_PIN_SET ) ;
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800057e:	4894      	ldr	r0, [pc, #592]	@ (80007d0 <display7SEG1+0x364>)
 8000580:	f000 fe4e 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g1_GPIO_Port , g1_Pin ,GPIO_PIN_RESET ) ;
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800058a:	4891      	ldr	r0, [pc, #580]	@ (80007d0 <display7SEG1+0x364>)
 800058c:	f000 fe48 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 3)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b03      	cmp	r3, #3
 8000594:	d128      	bne.n	80005e8 <display7SEG1+0x17c>
	{
		HAL_GPIO_WritePin ( a1_GPIO_Port , a1_Pin ,GPIO_PIN_RESET ) ;
 8000596:	2200      	movs	r2, #0
 8000598:	2180      	movs	r1, #128	@ 0x80
 800059a:	488d      	ldr	r0, [pc, #564]	@ (80007d0 <display7SEG1+0x364>)
 800059c:	f000 fe40 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b1_GPIO_Port , b1_Pin ,GPIO_PIN_RESET ) ;
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005a6:	488a      	ldr	r0, [pc, #552]	@ (80007d0 <display7SEG1+0x364>)
 80005a8:	f000 fe3a 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c1_GPIO_Port , c1_Pin ,GPIO_PIN_RESET ) ;
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005b2:	4887      	ldr	r0, [pc, #540]	@ (80007d0 <display7SEG1+0x364>)
 80005b4:	f000 fe34 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d1_GPIO_Port , d1_Pin ,GPIO_PIN_RESET ) ;
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005be:	4884      	ldr	r0, [pc, #528]	@ (80007d0 <display7SEG1+0x364>)
 80005c0:	f000 fe2e 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e1_GPIO_Port , e1_Pin ,GPIO_PIN_SET ) ;
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005ca:	4881      	ldr	r0, [pc, #516]	@ (80007d0 <display7SEG1+0x364>)
 80005cc:	f000 fe28 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f1_GPIO_Port , f1_Pin ,GPIO_PIN_SET ) ;
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005d6:	487e      	ldr	r0, [pc, #504]	@ (80007d0 <display7SEG1+0x364>)
 80005d8:	f000 fe22 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g1_GPIO_Port , g1_Pin ,GPIO_PIN_RESET ) ;
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e2:	487b      	ldr	r0, [pc, #492]	@ (80007d0 <display7SEG1+0x364>)
 80005e4:	f000 fe1c 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 4)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b04      	cmp	r3, #4
 80005ec:	d128      	bne.n	8000640 <display7SEG1+0x1d4>
	{
		HAL_GPIO_WritePin ( a1_GPIO_Port , a1_Pin ,GPIO_PIN_SET ) ;
 80005ee:	2201      	movs	r2, #1
 80005f0:	2180      	movs	r1, #128	@ 0x80
 80005f2:	4877      	ldr	r0, [pc, #476]	@ (80007d0 <display7SEG1+0x364>)
 80005f4:	f000 fe14 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b1_GPIO_Port , b1_Pin ,GPIO_PIN_RESET ) ;
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005fe:	4874      	ldr	r0, [pc, #464]	@ (80007d0 <display7SEG1+0x364>)
 8000600:	f000 fe0e 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c1_GPIO_Port , c1_Pin ,GPIO_PIN_RESET ) ;
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800060a:	4871      	ldr	r0, [pc, #452]	@ (80007d0 <display7SEG1+0x364>)
 800060c:	f000 fe08 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d1_GPIO_Port , d1_Pin ,GPIO_PIN_SET ) ;
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000616:	486e      	ldr	r0, [pc, #440]	@ (80007d0 <display7SEG1+0x364>)
 8000618:	f000 fe02 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e1_GPIO_Port , e1_Pin ,GPIO_PIN_SET ) ;
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000622:	486b      	ldr	r0, [pc, #428]	@ (80007d0 <display7SEG1+0x364>)
 8000624:	f000 fdfc 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f1_GPIO_Port , f1_Pin ,GPIO_PIN_RESET ) ;
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800062e:	4868      	ldr	r0, [pc, #416]	@ (80007d0 <display7SEG1+0x364>)
 8000630:	f000 fdf6 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g1_GPIO_Port , g1_Pin ,GPIO_PIN_RESET ) ;
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800063a:	4865      	ldr	r0, [pc, #404]	@ (80007d0 <display7SEG1+0x364>)
 800063c:	f000 fdf0 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 5)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b05      	cmp	r3, #5
 8000644:	d128      	bne.n	8000698 <display7SEG1+0x22c>
	{
		HAL_GPIO_WritePin ( a1_GPIO_Port , a1_Pin ,GPIO_PIN_RESET ) ;
 8000646:	2200      	movs	r2, #0
 8000648:	2180      	movs	r1, #128	@ 0x80
 800064a:	4861      	ldr	r0, [pc, #388]	@ (80007d0 <display7SEG1+0x364>)
 800064c:	f000 fde8 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b1_GPIO_Port , b1_Pin ,GPIO_PIN_SET ) ;
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000656:	485e      	ldr	r0, [pc, #376]	@ (80007d0 <display7SEG1+0x364>)
 8000658:	f000 fde2 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c1_GPIO_Port , c1_Pin ,GPIO_PIN_RESET ) ;
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000662:	485b      	ldr	r0, [pc, #364]	@ (80007d0 <display7SEG1+0x364>)
 8000664:	f000 fddc 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d1_GPIO_Port , d1_Pin ,GPIO_PIN_RESET ) ;
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800066e:	4858      	ldr	r0, [pc, #352]	@ (80007d0 <display7SEG1+0x364>)
 8000670:	f000 fdd6 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e1_GPIO_Port , e1_Pin ,GPIO_PIN_SET ) ;
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800067a:	4855      	ldr	r0, [pc, #340]	@ (80007d0 <display7SEG1+0x364>)
 800067c:	f000 fdd0 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f1_GPIO_Port , f1_Pin ,GPIO_PIN_RESET ) ;
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000686:	4852      	ldr	r0, [pc, #328]	@ (80007d0 <display7SEG1+0x364>)
 8000688:	f000 fdca 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g1_GPIO_Port , g1_Pin ,GPIO_PIN_RESET ) ;
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000692:	484f      	ldr	r0, [pc, #316]	@ (80007d0 <display7SEG1+0x364>)
 8000694:	f000 fdc4 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 6)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b06      	cmp	r3, #6
 800069c:	d128      	bne.n	80006f0 <display7SEG1+0x284>
	{
		HAL_GPIO_WritePin ( a1_GPIO_Port , a1_Pin ,GPIO_PIN_RESET ) ;
 800069e:	2200      	movs	r2, #0
 80006a0:	2180      	movs	r1, #128	@ 0x80
 80006a2:	484b      	ldr	r0, [pc, #300]	@ (80007d0 <display7SEG1+0x364>)
 80006a4:	f000 fdbc 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b1_GPIO_Port , b1_Pin ,GPIO_PIN_SET ) ;
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006ae:	4848      	ldr	r0, [pc, #288]	@ (80007d0 <display7SEG1+0x364>)
 80006b0:	f000 fdb6 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c1_GPIO_Port , c1_Pin ,GPIO_PIN_RESET ) ;
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ba:	4845      	ldr	r0, [pc, #276]	@ (80007d0 <display7SEG1+0x364>)
 80006bc:	f000 fdb0 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d1_GPIO_Port , d1_Pin ,GPIO_PIN_RESET ) ;
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006c6:	4842      	ldr	r0, [pc, #264]	@ (80007d0 <display7SEG1+0x364>)
 80006c8:	f000 fdaa 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e1_GPIO_Port , e1_Pin ,GPIO_PIN_RESET ) ;
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006d2:	483f      	ldr	r0, [pc, #252]	@ (80007d0 <display7SEG1+0x364>)
 80006d4:	f000 fda4 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f1_GPIO_Port , f1_Pin ,GPIO_PIN_RESET ) ;
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006de:	483c      	ldr	r0, [pc, #240]	@ (80007d0 <display7SEG1+0x364>)
 80006e0:	f000 fd9e 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g1_GPIO_Port , g1_Pin ,GPIO_PIN_RESET ) ;
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006ea:	4839      	ldr	r0, [pc, #228]	@ (80007d0 <display7SEG1+0x364>)
 80006ec:	f000 fd98 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 7)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	d128      	bne.n	8000748 <display7SEG1+0x2dc>
	{
		HAL_GPIO_WritePin ( a1_GPIO_Port , a1_Pin ,GPIO_PIN_RESET ) ;
 80006f6:	2200      	movs	r2, #0
 80006f8:	2180      	movs	r1, #128	@ 0x80
 80006fa:	4835      	ldr	r0, [pc, #212]	@ (80007d0 <display7SEG1+0x364>)
 80006fc:	f000 fd90 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b1_GPIO_Port , b1_Pin ,GPIO_PIN_RESET ) ;
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000706:	4832      	ldr	r0, [pc, #200]	@ (80007d0 <display7SEG1+0x364>)
 8000708:	f000 fd8a 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c1_GPIO_Port , c1_Pin ,GPIO_PIN_RESET ) ;
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000712:	482f      	ldr	r0, [pc, #188]	@ (80007d0 <display7SEG1+0x364>)
 8000714:	f000 fd84 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d1_GPIO_Port , d1_Pin ,GPIO_PIN_SET ) ;
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800071e:	482c      	ldr	r0, [pc, #176]	@ (80007d0 <display7SEG1+0x364>)
 8000720:	f000 fd7e 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e1_GPIO_Port , e1_Pin ,GPIO_PIN_SET ) ;
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800072a:	4829      	ldr	r0, [pc, #164]	@ (80007d0 <display7SEG1+0x364>)
 800072c:	f000 fd78 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f1_GPIO_Port , f1_Pin ,GPIO_PIN_SET ) ;
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000736:	4826      	ldr	r0, [pc, #152]	@ (80007d0 <display7SEG1+0x364>)
 8000738:	f000 fd72 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g1_GPIO_Port , g1_Pin ,GPIO_PIN_SET ) ;
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000742:	4823      	ldr	r0, [pc, #140]	@ (80007d0 <display7SEG1+0x364>)
 8000744:	f000 fd6c 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 8)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b08      	cmp	r3, #8
 800074c:	d128      	bne.n	80007a0 <display7SEG1+0x334>
	{
		HAL_GPIO_WritePin ( a1_GPIO_Port , a1_Pin ,GPIO_PIN_RESET ) ;
 800074e:	2200      	movs	r2, #0
 8000750:	2180      	movs	r1, #128	@ 0x80
 8000752:	481f      	ldr	r0, [pc, #124]	@ (80007d0 <display7SEG1+0x364>)
 8000754:	f000 fd64 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b1_GPIO_Port , b1_Pin ,GPIO_PIN_RESET ) ;
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800075e:	481c      	ldr	r0, [pc, #112]	@ (80007d0 <display7SEG1+0x364>)
 8000760:	f000 fd5e 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c1_GPIO_Port , c1_Pin ,GPIO_PIN_RESET ) ;
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800076a:	4819      	ldr	r0, [pc, #100]	@ (80007d0 <display7SEG1+0x364>)
 800076c:	f000 fd58 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d1_GPIO_Port , d1_Pin ,GPIO_PIN_RESET ) ;
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000776:	4816      	ldr	r0, [pc, #88]	@ (80007d0 <display7SEG1+0x364>)
 8000778:	f000 fd52 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e1_GPIO_Port , e1_Pin ,GPIO_PIN_RESET ) ;
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000782:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <display7SEG1+0x364>)
 8000784:	f000 fd4c 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f1_GPIO_Port , f1_Pin ,GPIO_PIN_RESET ) ;
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800078e:	4810      	ldr	r0, [pc, #64]	@ (80007d0 <display7SEG1+0x364>)
 8000790:	f000 fd46 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g1_GPIO_Port , g1_Pin ,GPIO_PIN_RESET ) ;
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800079a:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <display7SEG1+0x364>)
 800079c:	f000 fd40 	bl	8001220 <HAL_GPIO_WritePin>
	}
	if (num == 9)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b09      	cmp	r3, #9
 80007a4:	d12b      	bne.n	80007fe <display7SEG1+0x392>
	{
		HAL_GPIO_WritePin ( a1_GPIO_Port , a1_Pin ,GPIO_PIN_RESET ) ;
 80007a6:	2200      	movs	r2, #0
 80007a8:	2180      	movs	r1, #128	@ 0x80
 80007aa:	4809      	ldr	r0, [pc, #36]	@ (80007d0 <display7SEG1+0x364>)
 80007ac:	f000 fd38 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b1_GPIO_Port , b1_Pin ,GPIO_PIN_RESET ) ;
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007b6:	4806      	ldr	r0, [pc, #24]	@ (80007d0 <display7SEG1+0x364>)
 80007b8:	f000 fd32 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c1_GPIO_Port , c1_Pin ,GPIO_PIN_RESET ) ;
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c2:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <display7SEG1+0x364>)
 80007c4:	f000 fd2c 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d1_GPIO_Port , d1_Pin ,GPIO_PIN_RESET ) ;
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ce:	e001      	b.n	80007d4 <display7SEG1+0x368>
 80007d0:	40010c00 	.word	0x40010c00
 80007d4:	480c      	ldr	r0, [pc, #48]	@ (8000808 <display7SEG1+0x39c>)
 80007d6:	f000 fd23 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e1_GPIO_Port , e1_Pin ,GPIO_PIN_SET ) ;
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007e0:	4809      	ldr	r0, [pc, #36]	@ (8000808 <display7SEG1+0x39c>)
 80007e2:	f000 fd1d 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f1_GPIO_Port , f1_Pin ,GPIO_PIN_RESET ) ;
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007ec:	4806      	ldr	r0, [pc, #24]	@ (8000808 <display7SEG1+0x39c>)
 80007ee:	f000 fd17 	bl	8001220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g1_GPIO_Port , g1_Pin ,GPIO_PIN_RESET ) ;
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f8:	4803      	ldr	r0, [pc, #12]	@ (8000808 <display7SEG1+0x39c>)
 80007fa:	f000 fd11 	bl	8001220 <HAL_GPIO_WritePin>
	}
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40010c00 	.word	0x40010c00

0800080c <main>:
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000812:	f000 fa1f 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000816:	f000 f90b 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f000 f945 	bl	8000aa8 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int counter1 = 5;   // đếm cho đèn 1
 800081e:	2305      	movs	r3, #5
 8000820:	60fb      	str	r3, [r7, #12]
  int counter2 = 3;   // đếm cho đèn 2
 8000822:	2303      	movs	r3, #3
 8000824:	60bb      	str	r3, [r7, #8]
  int state = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */
	  switch (state){
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b03      	cmp	r3, #3
 800082e:	f200 80ab 	bhi.w	8000988 <main+0x17c>
 8000832:	a201      	add	r2, pc, #4	@ (adr r2, 8000838 <main+0x2c>)
 8000834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000838:	08000849 	.word	0x08000849
 800083c:	08000899 	.word	0x08000899
 8000840:	080008e9 	.word	0x080008e9
 8000844:	08000939 	.word	0x08000939
	            case 0: // Đèn 1: ĐỎ (5s) + Đèn 2: XANH (3s)
	                display7SEG(counter1);      // hiển thị counter1
 8000848:	68f8      	ldr	r0, [r7, #12]
 800084a:	f7ff fc7f 	bl	800014c <display7SEG>
	                display7SEG1(counter2);     // hiển thị counter2
 800084e:	68b8      	ldr	r0, [r7, #8]
 8000850:	f7ff fe0c 	bl	800046c <display7SEG1>
	                // Đèn 1: ĐỎ
	                HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);   // RED sáng
 8000854:	2201      	movs	r2, #1
 8000856:	2120      	movs	r1, #32
 8000858:	4874      	ldr	r0, [pc, #464]	@ (8000a2c <main+0x220>)
 800085a:	f000 fce1 	bl	8001220 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET); // GREEN tắt
 800085e:	2200      	movs	r2, #0
 8000860:	2180      	movs	r1, #128	@ 0x80
 8000862:	4872      	ldr	r0, [pc, #456]	@ (8000a2c <main+0x220>)
 8000864:	f000 fcdc 	bl	8001220 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET); // YELLOW tắt
 8000868:	2200      	movs	r2, #0
 800086a:	2140      	movs	r1, #64	@ 0x40
 800086c:	486f      	ldr	r0, [pc, #444]	@ (8000a2c <main+0x220>)
 800086e:	f000 fcd7 	bl	8001220 <HAL_GPIO_WritePin>
	                // Đèn 2: XANH
	                HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);   // RED tắt
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000878:	486c      	ldr	r0, [pc, #432]	@ (8000a2c <main+0x220>)
 800087a:	f000 fcd1 	bl	8001220 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET); // GREEN sáng
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000884:	4869      	ldr	r0, [pc, #420]	@ (8000a2c <main+0x220>)
 8000886:	f000 fccb 	bl	8001220 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_RESET); // YELLOW tắt
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000890:	4866      	ldr	r0, [pc, #408]	@ (8000a2c <main+0x220>)
 8000892:	f000 fcc5 	bl	8001220 <HAL_GPIO_WritePin>
	                break;
 8000896:	e077      	b.n	8000988 <main+0x17c>

	            case 1: // Đèn 1: ĐỎ (2s) + Đèn 2: VÀNG (2s)
	                display7SEG(counter1);
 8000898:	68f8      	ldr	r0, [r7, #12]
 800089a:	f7ff fc57 	bl	800014c <display7SEG>
	                display7SEG1(counter2);
 800089e:	68b8      	ldr	r0, [r7, #8]
 80008a0:	f7ff fde4 	bl	800046c <display7SEG1>
	                // Đèn 1: ĐỎ
	                HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);   // RED sáng
 80008a4:	2201      	movs	r2, #1
 80008a6:	2120      	movs	r1, #32
 80008a8:	4860      	ldr	r0, [pc, #384]	@ (8000a2c <main+0x220>)
 80008aa:	f000 fcb9 	bl	8001220 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET); // GREEN tắt
 80008ae:	2200      	movs	r2, #0
 80008b0:	2180      	movs	r1, #128	@ 0x80
 80008b2:	485e      	ldr	r0, [pc, #376]	@ (8000a2c <main+0x220>)
 80008b4:	f000 fcb4 	bl	8001220 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET); // YELLOW tắt
 80008b8:	2200      	movs	r2, #0
 80008ba:	2140      	movs	r1, #64	@ 0x40
 80008bc:	485b      	ldr	r0, [pc, #364]	@ (8000a2c <main+0x220>)
 80008be:	f000 fcaf 	bl	8001220 <HAL_GPIO_WritePin>
	                // Đèn 2: VÀNG
	                HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);   // RED tắt
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008c8:	4858      	ldr	r0, [pc, #352]	@ (8000a2c <main+0x220>)
 80008ca:	f000 fca9 	bl	8001220 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);   // GREEN tắt
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008d4:	4855      	ldr	r0, [pc, #340]	@ (8000a2c <main+0x220>)
 80008d6:	f000 fca3 	bl	8001220 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET); // YELLOW sáng
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008e0:	4852      	ldr	r0, [pc, #328]	@ (8000a2c <main+0x220>)
 80008e2:	f000 fc9d 	bl	8001220 <HAL_GPIO_WritePin>
	                break;
 80008e6:	e04f      	b.n	8000988 <main+0x17c>

	            case 2: // Đèn 1: XANH (3s) + Đèn 2: ĐỎ (5s)
	                display7SEG(counter1);
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f7ff fc2f 	bl	800014c <display7SEG>
	                display7SEG1(counter2);
 80008ee:	68b8      	ldr	r0, [r7, #8]
 80008f0:	f7ff fdbc 	bl	800046c <display7SEG1>
	                // Đèn 1: XANH
	                HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);   // RED tắt
 80008f4:	2200      	movs	r2, #0
 80008f6:	2120      	movs	r1, #32
 80008f8:	484c      	ldr	r0, [pc, #304]	@ (8000a2c <main+0x220>)
 80008fa:	f000 fc91 	bl	8001220 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET); // GREEN sáng
 80008fe:	2201      	movs	r2, #1
 8000900:	2180      	movs	r1, #128	@ 0x80
 8000902:	484a      	ldr	r0, [pc, #296]	@ (8000a2c <main+0x220>)
 8000904:	f000 fc8c 	bl	8001220 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET); // YELLOW tắt
 8000908:	2200      	movs	r2, #0
 800090a:	2140      	movs	r1, #64	@ 0x40
 800090c:	4847      	ldr	r0, [pc, #284]	@ (8000a2c <main+0x220>)
 800090e:	f000 fc87 	bl	8001220 <HAL_GPIO_WritePin>
	                // Đèn 2: ĐỎ
	                HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);   // RED sáng
 8000912:	2201      	movs	r2, #1
 8000914:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000918:	4844      	ldr	r0, [pc, #272]	@ (8000a2c <main+0x220>)
 800091a:	f000 fc81 	bl	8001220 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET); // GREEN tắt
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000924:	4841      	ldr	r0, [pc, #260]	@ (8000a2c <main+0x220>)
 8000926:	f000 fc7b 	bl	8001220 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_RESET); // YELLOW tắt
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000930:	483e      	ldr	r0, [pc, #248]	@ (8000a2c <main+0x220>)
 8000932:	f000 fc75 	bl	8001220 <HAL_GPIO_WritePin>
	                break;
 8000936:	e027      	b.n	8000988 <main+0x17c>

	            case 3: // Đèn 1: VÀNG (2s) + Đèn 2: ĐỎ (2s)
	                display7SEG(counter1);
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	f7ff fc07 	bl	800014c <display7SEG>
	                display7SEG1(counter2);
 800093e:	68b8      	ldr	r0, [r7, #8]
 8000940:	f7ff fd94 	bl	800046c <display7SEG1>
	                // Đèn 1: VÀNG
	                HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);   // RED tắt
 8000944:	2200      	movs	r2, #0
 8000946:	2120      	movs	r1, #32
 8000948:	4838      	ldr	r0, [pc, #224]	@ (8000a2c <main+0x220>)
 800094a:	f000 fc69 	bl	8001220 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);   // GREEN tắt
 800094e:	2200      	movs	r2, #0
 8000950:	2180      	movs	r1, #128	@ 0x80
 8000952:	4836      	ldr	r0, [pc, #216]	@ (8000a2c <main+0x220>)
 8000954:	f000 fc64 	bl	8001220 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET); // YELLOW sáng
 8000958:	2201      	movs	r2, #1
 800095a:	2140      	movs	r1, #64	@ 0x40
 800095c:	4833      	ldr	r0, [pc, #204]	@ (8000a2c <main+0x220>)
 800095e:	f000 fc5f 	bl	8001220 <HAL_GPIO_WritePin>
	                // Đèn 2: ĐỎ
	                HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);   // RED sáng
 8000962:	2201      	movs	r2, #1
 8000964:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000968:	4830      	ldr	r0, [pc, #192]	@ (8000a2c <main+0x220>)
 800096a:	f000 fc59 	bl	8001220 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET); // GREEN tắt
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000974:	482d      	ldr	r0, [pc, #180]	@ (8000a2c <main+0x220>)
 8000976:	f000 fc53 	bl	8001220 <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_RESET); // YELLOW tắt
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000980:	482a      	ldr	r0, [pc, #168]	@ (8000a2c <main+0x220>)
 8000982:	f000 fc4d 	bl	8001220 <HAL_GPIO_WritePin>
	                break;
 8000986:	bf00      	nop
	        }

	        // Logic chuyển trạng thái TRƯỚC KHI giảm counter
	        if (state == 0 && counter2 == 1){
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d10a      	bne.n	80009a4 <main+0x198>
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d107      	bne.n	80009a4 <main+0x198>
	            // Đèn 2 sắp hết xanh -> chuyển sang vàng
	            state = 1;
 8000994:	2301      	movs	r3, #1
 8000996:	607b      	str	r3, [r7, #4]
	            counter1--;  // giảm counter1
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	3b01      	subs	r3, #1
 800099c:	60fb      	str	r3, [r7, #12]
	            counter2 = 2;  // reset counter2 cho vàng
 800099e:	2302      	movs	r3, #2
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	e033      	b.n	8000a0c <main+0x200>
	        }
	        else if (state == 1 && counter1 == 1 && counter2 == 1){
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d10c      	bne.n	80009c4 <main+0x1b8>
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d109      	bne.n	80009c4 <main+0x1b8>
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d106      	bne.n	80009c4 <main+0x1b8>
	            // Đèn 1 và đèn 2 sắp hết -> chuyển trạng thái mới
	            state = 2;
 80009b6:	2302      	movs	r3, #2
 80009b8:	607b      	str	r3, [r7, #4]
	            counter1 = 3;  // đèn 1 xanh 3s
 80009ba:	2303      	movs	r3, #3
 80009bc:	60fb      	str	r3, [r7, #12]
	            counter2 = 5;  // đèn 2 đỏ 5s
 80009be:	2305      	movs	r3, #5
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	e023      	b.n	8000a0c <main+0x200>
	        }
	        else if (state == 2 && counter1 == 1){
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d10a      	bne.n	80009e0 <main+0x1d4>
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d107      	bne.n	80009e0 <main+0x1d4>
	            // Đèn 1 sắp hết xanh -> chuyển sang vàng
	            state = 3;
 80009d0:	2303      	movs	r3, #3
 80009d2:	607b      	str	r3, [r7, #4]
	            counter1 = 2;  // reset counter1 cho vàng
 80009d4:	2302      	movs	r3, #2
 80009d6:	60fb      	str	r3, [r7, #12]
	            counter2--;  // giảm counter2
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	3b01      	subs	r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	e015      	b.n	8000a0c <main+0x200>
	        }
	        else if (state == 3 && counter1 == 1 && counter2 == 1){
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d10c      	bne.n	8000a00 <main+0x1f4>
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d109      	bne.n	8000a00 <main+0x1f4>
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d106      	bne.n	8000a00 <main+0x1f4>
	            // Đèn 1 và đèn 2 sắp hết -> quay lại ban đầu
	            state = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
	            counter1 = 5;  // đèn 1 đỏ 5s
 80009f6:	2305      	movs	r3, #5
 80009f8:	60fb      	str	r3, [r7, #12]
	            counter2 = 3;  // đèn 2 xanh 3s
 80009fa:	2303      	movs	r3, #3
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	e005      	b.n	8000a0c <main+0x200>
	        }
	        else {
	            // Giảm counter bình thường
	            counter1--;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	60fb      	str	r3, [r7, #12]
	            counter2--;
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	60bb      	str	r3, [r7, #8]
	        }

	        // Đảm bảo counter không bao giờ âm
	        if (counter1 < 0) counter1 = 0;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	da01      	bge.n	8000a16 <main+0x20a>
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
	        if (counter2 < 0) counter2 = 0;
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	da01      	bge.n	8000a20 <main+0x214>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]

	        HAL_Delay(1000);
 8000a20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a24:	f000 f978 	bl	8000d18 <HAL_Delay>
	  switch (state){
 8000a28:	e6ff      	b.n	800082a <main+0x1e>
 8000a2a:	bf00      	nop
 8000a2c:	40010800 	.word	0x40010800

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b090      	sub	sp, #64	@ 0x40
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0318 	add.w	r3, r7, #24
 8000a3a:	2228      	movs	r2, #40	@ 0x28
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 ffe4 	bl	8001a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a56:	2301      	movs	r3, #1
 8000a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a5a:	2310      	movs	r3, #16
 8000a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a62:	f107 0318 	add.w	r3, r7, #24
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fbf2 	bl	8001250 <HAL_RCC_OscConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a72:	f000 f86f 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a76:	230f      	movs	r3, #15
 8000a78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 fe60 	bl	8001754 <HAL_RCC_ClockConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a9a:	f000 f85b 	bl	8000b54 <Error_Handler>
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	3740      	adds	r7, #64	@ 0x40
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b22      	ldr	r3, [pc, #136]	@ (8000b48 <MX_GPIO_Init+0xa0>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a21      	ldr	r2, [pc, #132]	@ (8000b48 <MX_GPIO_Init+0xa0>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <MX_GPIO_Init+0xa0>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0304 	and.w	r3, r3, #4
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <MX_GPIO_Init+0xa0>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b48 <MX_GPIO_Init+0xa0>)
 8000ada:	f043 0308 	orr.w	r3, r3, #8
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <MX_GPIO_Init+0xa0>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0308 	and.w	r3, r3, #8
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_1_Pin
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8000af2:	4816      	ldr	r0, [pc, #88]	@ (8000b4c <MX_GPIO_Init+0xa4>)
 8000af4:	f000 fb94 	bl	8001220 <HAL_GPIO_WritePin>
                          |LED_YELLOW_1_Pin|LED_GREEN_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d1_Pin
 8000af8:	2200      	movs	r2, #0
 8000afa:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8000afe:	4814      	ldr	r0, [pc, #80]	@ (8000b50 <MX_GPIO_Init+0xa8>)
 8000b00:	f000 fb8e 	bl	8001220 <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin|a1_Pin
                          |b1_Pin|c1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_RED_1_Pin
                           LED_YELLOW_1_Pin LED_GREEN_1_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_1_Pin
 8000b04:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000b08:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_1_Pin|LED_GREEN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2302      	movs	r3, #2
 8000b14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480b      	ldr	r0, [pc, #44]	@ (8000b4c <MX_GPIO_Init+0xa4>)
 8000b1e:	f000 fa03 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin d_Pin
                           e_Pin f_Pin g_Pin a1_Pin
                           b1_Pin c1_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d1_Pin
 8000b22:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000b26:	60bb      	str	r3, [r7, #8]
                          |e1_Pin|f1_Pin|g1_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a1_Pin
                          |b1_Pin|c1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2302      	movs	r3, #2
 8000b32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_GPIO_Init+0xa8>)
 8000b3c:	f000 f9f4 	bl	8000f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b40:	bf00      	nop
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010800 	.word	0x40010800
 8000b50:	40010c00 	.word	0x40010c00

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <Error_Handler+0x8>

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <HAL_MspInit+0x40>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba0 <HAL_MspInit+0x40>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <HAL_MspInit+0x40>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <HAL_MspInit+0x40>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a07      	ldr	r2, [pc, #28]	@ (8000ba0 <HAL_MspInit+0x40>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b88:	61d3      	str	r3, [r2, #28]
 8000b8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <HAL_MspInit+0x40>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <NMI_Handler+0x4>

08000bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 f874 	bl	8000ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c08:	f7ff fff8 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c0c:	480b      	ldr	r0, [pc, #44]	@ (8000c3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c0e:	490c      	ldr	r1, [pc, #48]	@ (8000c40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c10:	4a0c      	ldr	r2, [pc, #48]	@ (8000c44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a09      	ldr	r2, [pc, #36]	@ (8000c48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c24:	4c09      	ldr	r4, [pc, #36]	@ (8000c4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c32:	f000 fef3 	bl	8001a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c36:	f7ff fde9 	bl	800080c <main>
  bx lr
 8000c3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c44:	08001aa8 	.word	0x08001aa8
  ldr r2, =_sbss
 8000c48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c4c:	2000002c 	.word	0x2000002c

08000c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC1_2_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <HAL_Init+0x28>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	@ (8000c7c <HAL_Init+0x28>)
 8000c5e:	f043 0310 	orr.w	r3, r3, #16
 8000c62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f92b 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f000 f808 	bl	8000c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f7ff ff76 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40022000 	.word	0x40022000

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_InitTick+0x54>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_InitTick+0x58>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f935 	bl	8000f0e <HAL_SYSTICK_Config>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00e      	b.n	8000ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d80a      	bhi.n	8000cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f000 f90b 	bl	8000ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc0:	4a06      	ldr	r2, [pc, #24]	@ (8000cdc <HAL_InitTick+0x5c>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e000      	b.n	8000ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <HAL_IncTick+0x1c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <HAL_IncTick+0x20>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a03      	ldr	r2, [pc, #12]	@ (8000d00 <HAL_IncTick+0x20>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000028 	.word	0x20000028

08000d04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b02      	ldr	r3, [pc, #8]	@ (8000d14 <HAL_GetTick+0x10>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	20000028 	.word	0x20000028

08000d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d20:	f7ff fff0 	bl	8000d04 <HAL_GetTick>
 8000d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d30:	d005      	beq.n	8000d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <HAL_Delay+0x44>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d3e:	bf00      	nop
 8000d40:	f7ff ffe0 	bl	8000d04 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d8f7      	bhi.n	8000d40 <HAL_Delay+0x28>
  {
  }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db0a      	blt.n	8000dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	490c      	ldr	r1, [pc, #48]	@ (8000e10 <__NVIC_SetPriority+0x4c>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dec:	e00a      	b.n	8000e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4908      	ldr	r1, [pc, #32]	@ (8000e14 <__NVIC_SetPriority+0x50>)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	761a      	strb	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	@ 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43d9      	mvns	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	4313      	orrs	r3, r2
         );
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	@ 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f7ff ff90 	bl	8000dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff49 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff5e 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff90 	bl	8000e18 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5f 	bl	8000dc4 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffb0 	bl	8000e7c <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b08b      	sub	sp, #44	@ 0x2c
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3a:	e161      	b.n	8001200 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	f040 8150 	bne.w	80011fa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	4a97      	ldr	r2, [pc, #604]	@ (80011bc <HAL_GPIO_Init+0x294>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d05e      	beq.n	8001022 <HAL_GPIO_Init+0xfa>
 8000f64:	4a95      	ldr	r2, [pc, #596]	@ (80011bc <HAL_GPIO_Init+0x294>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d875      	bhi.n	8001056 <HAL_GPIO_Init+0x12e>
 8000f6a:	4a95      	ldr	r2, [pc, #596]	@ (80011c0 <HAL_GPIO_Init+0x298>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d058      	beq.n	8001022 <HAL_GPIO_Init+0xfa>
 8000f70:	4a93      	ldr	r2, [pc, #588]	@ (80011c0 <HAL_GPIO_Init+0x298>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d86f      	bhi.n	8001056 <HAL_GPIO_Init+0x12e>
 8000f76:	4a93      	ldr	r2, [pc, #588]	@ (80011c4 <HAL_GPIO_Init+0x29c>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d052      	beq.n	8001022 <HAL_GPIO_Init+0xfa>
 8000f7c:	4a91      	ldr	r2, [pc, #580]	@ (80011c4 <HAL_GPIO_Init+0x29c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d869      	bhi.n	8001056 <HAL_GPIO_Init+0x12e>
 8000f82:	4a91      	ldr	r2, [pc, #580]	@ (80011c8 <HAL_GPIO_Init+0x2a0>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d04c      	beq.n	8001022 <HAL_GPIO_Init+0xfa>
 8000f88:	4a8f      	ldr	r2, [pc, #572]	@ (80011c8 <HAL_GPIO_Init+0x2a0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d863      	bhi.n	8001056 <HAL_GPIO_Init+0x12e>
 8000f8e:	4a8f      	ldr	r2, [pc, #572]	@ (80011cc <HAL_GPIO_Init+0x2a4>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d046      	beq.n	8001022 <HAL_GPIO_Init+0xfa>
 8000f94:	4a8d      	ldr	r2, [pc, #564]	@ (80011cc <HAL_GPIO_Init+0x2a4>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d85d      	bhi.n	8001056 <HAL_GPIO_Init+0x12e>
 8000f9a:	2b12      	cmp	r3, #18
 8000f9c:	d82a      	bhi.n	8000ff4 <HAL_GPIO_Init+0xcc>
 8000f9e:	2b12      	cmp	r3, #18
 8000fa0:	d859      	bhi.n	8001056 <HAL_GPIO_Init+0x12e>
 8000fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8000fa8 <HAL_GPIO_Init+0x80>)
 8000fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa8:	08001023 	.word	0x08001023
 8000fac:	08000ffd 	.word	0x08000ffd
 8000fb0:	0800100f 	.word	0x0800100f
 8000fb4:	08001051 	.word	0x08001051
 8000fb8:	08001057 	.word	0x08001057
 8000fbc:	08001057 	.word	0x08001057
 8000fc0:	08001057 	.word	0x08001057
 8000fc4:	08001057 	.word	0x08001057
 8000fc8:	08001057 	.word	0x08001057
 8000fcc:	08001057 	.word	0x08001057
 8000fd0:	08001057 	.word	0x08001057
 8000fd4:	08001057 	.word	0x08001057
 8000fd8:	08001057 	.word	0x08001057
 8000fdc:	08001057 	.word	0x08001057
 8000fe0:	08001057 	.word	0x08001057
 8000fe4:	08001057 	.word	0x08001057
 8000fe8:	08001057 	.word	0x08001057
 8000fec:	08001005 	.word	0x08001005
 8000ff0:	08001019 	.word	0x08001019
 8000ff4:	4a76      	ldr	r2, [pc, #472]	@ (80011d0 <HAL_GPIO_Init+0x2a8>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d013      	beq.n	8001022 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ffa:	e02c      	b.n	8001056 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	623b      	str	r3, [r7, #32]
          break;
 8001002:	e029      	b.n	8001058 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	3304      	adds	r3, #4
 800100a:	623b      	str	r3, [r7, #32]
          break;
 800100c:	e024      	b.n	8001058 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	3308      	adds	r3, #8
 8001014:	623b      	str	r3, [r7, #32]
          break;
 8001016:	e01f      	b.n	8001058 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	330c      	adds	r3, #12
 800101e:	623b      	str	r3, [r7, #32]
          break;
 8001020:	e01a      	b.n	8001058 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800102a:	2304      	movs	r3, #4
 800102c:	623b      	str	r3, [r7, #32]
          break;
 800102e:	e013      	b.n	8001058 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d105      	bne.n	8001044 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001038:	2308      	movs	r3, #8
 800103a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	611a      	str	r2, [r3, #16]
          break;
 8001042:	e009      	b.n	8001058 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001044:	2308      	movs	r3, #8
 8001046:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	615a      	str	r2, [r3, #20]
          break;
 800104e:	e003      	b.n	8001058 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
          break;
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x130>
          break;
 8001056:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	2bff      	cmp	r3, #255	@ 0xff
 800105c:	d801      	bhi.n	8001062 <HAL_GPIO_Init+0x13a>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	e001      	b.n	8001066 <HAL_GPIO_Init+0x13e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3304      	adds	r3, #4
 8001066:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	2bff      	cmp	r3, #255	@ 0xff
 800106c:	d802      	bhi.n	8001074 <HAL_GPIO_Init+0x14c>
 800106e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	e002      	b.n	800107a <HAL_GPIO_Init+0x152>
 8001074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001076:	3b08      	subs	r3, #8
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	210f      	movs	r1, #15
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	401a      	ands	r2, r3
 800108c:	6a39      	ldr	r1, [r7, #32]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	fa01 f303 	lsl.w	r3, r1, r3
 8001094:	431a      	orrs	r2, r3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 80a9 	beq.w	80011fa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010a8:	4b4a      	ldr	r3, [pc, #296]	@ (80011d4 <HAL_GPIO_Init+0x2ac>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a49      	ldr	r2, [pc, #292]	@ (80011d4 <HAL_GPIO_Init+0x2ac>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b47      	ldr	r3, [pc, #284]	@ (80011d4 <HAL_GPIO_Init+0x2ac>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010c0:	4a45      	ldr	r2, [pc, #276]	@ (80011d8 <HAL_GPIO_Init+0x2b0>)
 80010c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	4013      	ands	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a3d      	ldr	r2, [pc, #244]	@ (80011dc <HAL_GPIO_Init+0x2b4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d00d      	beq.n	8001108 <HAL_GPIO_Init+0x1e0>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a3c      	ldr	r2, [pc, #240]	@ (80011e0 <HAL_GPIO_Init+0x2b8>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d007      	beq.n	8001104 <HAL_GPIO_Init+0x1dc>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a3b      	ldr	r2, [pc, #236]	@ (80011e4 <HAL_GPIO_Init+0x2bc>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d101      	bne.n	8001100 <HAL_GPIO_Init+0x1d8>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e004      	b.n	800110a <HAL_GPIO_Init+0x1e2>
 8001100:	2303      	movs	r3, #3
 8001102:	e002      	b.n	800110a <HAL_GPIO_Init+0x1e2>
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <HAL_GPIO_Init+0x1e2>
 8001108:	2300      	movs	r3, #0
 800110a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800110c:	f002 0203 	and.w	r2, r2, #3
 8001110:	0092      	lsls	r2, r2, #2
 8001112:	4093      	lsls	r3, r2
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800111a:	492f      	ldr	r1, [pc, #188]	@ (80011d8 <HAL_GPIO_Init+0x2b0>)
 800111c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111e:	089b      	lsrs	r3, r3, #2
 8001120:	3302      	adds	r3, #2
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d006      	beq.n	8001142 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001134:	4b2c      	ldr	r3, [pc, #176]	@ (80011e8 <HAL_GPIO_Init+0x2c0>)
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	492b      	ldr	r1, [pc, #172]	@ (80011e8 <HAL_GPIO_Init+0x2c0>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	608b      	str	r3, [r1, #8]
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001142:	4b29      	ldr	r3, [pc, #164]	@ (80011e8 <HAL_GPIO_Init+0x2c0>)
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	43db      	mvns	r3, r3
 800114a:	4927      	ldr	r1, [pc, #156]	@ (80011e8 <HAL_GPIO_Init+0x2c0>)
 800114c:	4013      	ands	r3, r2
 800114e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d006      	beq.n	800116a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800115c:	4b22      	ldr	r3, [pc, #136]	@ (80011e8 <HAL_GPIO_Init+0x2c0>)
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	4921      	ldr	r1, [pc, #132]	@ (80011e8 <HAL_GPIO_Init+0x2c0>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	60cb      	str	r3, [r1, #12]
 8001168:	e006      	b.n	8001178 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800116a:	4b1f      	ldr	r3, [pc, #124]	@ (80011e8 <HAL_GPIO_Init+0x2c0>)
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	43db      	mvns	r3, r3
 8001172:	491d      	ldr	r1, [pc, #116]	@ (80011e8 <HAL_GPIO_Init+0x2c0>)
 8001174:	4013      	ands	r3, r2
 8001176:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d006      	beq.n	8001192 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001184:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <HAL_GPIO_Init+0x2c0>)
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	4917      	ldr	r1, [pc, #92]	@ (80011e8 <HAL_GPIO_Init+0x2c0>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	604b      	str	r3, [r1, #4]
 8001190:	e006      	b.n	80011a0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001192:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <HAL_GPIO_Init+0x2c0>)
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	43db      	mvns	r3, r3
 800119a:	4913      	ldr	r1, [pc, #76]	@ (80011e8 <HAL_GPIO_Init+0x2c0>)
 800119c:	4013      	ands	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d01f      	beq.n	80011ec <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011ac:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <HAL_GPIO_Init+0x2c0>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	490d      	ldr	r1, [pc, #52]	@ (80011e8 <HAL_GPIO_Init+0x2c0>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	600b      	str	r3, [r1, #0]
 80011b8:	e01f      	b.n	80011fa <HAL_GPIO_Init+0x2d2>
 80011ba:	bf00      	nop
 80011bc:	10320000 	.word	0x10320000
 80011c0:	10310000 	.word	0x10310000
 80011c4:	10220000 	.word	0x10220000
 80011c8:	10210000 	.word	0x10210000
 80011cc:	10120000 	.word	0x10120000
 80011d0:	10110000 	.word	0x10110000
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010000 	.word	0x40010000
 80011dc:	40010800 	.word	0x40010800
 80011e0:	40010c00 	.word	0x40010c00
 80011e4:	40011000 	.word	0x40011000
 80011e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011ec:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <HAL_GPIO_Init+0x2f4>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	4909      	ldr	r1, [pc, #36]	@ (800121c <HAL_GPIO_Init+0x2f4>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fc:	3301      	adds	r3, #1
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001206:	fa22 f303 	lsr.w	r3, r2, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	f47f ae96 	bne.w	8000f3c <HAL_GPIO_Init+0x14>
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	372c      	adds	r7, #44	@ 0x2c
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	40010400 	.word	0x40010400

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	611a      	str	r2, [r3, #16]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e272      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8087 	beq.w	800137e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001270:	4b92      	ldr	r3, [pc, #584]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b04      	cmp	r3, #4
 800127a:	d00c      	beq.n	8001296 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800127c:	4b8f      	ldr	r3, [pc, #572]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 030c 	and.w	r3, r3, #12
 8001284:	2b08      	cmp	r3, #8
 8001286:	d112      	bne.n	80012ae <HAL_RCC_OscConfig+0x5e>
 8001288:	4b8c      	ldr	r3, [pc, #560]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001294:	d10b      	bne.n	80012ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001296:	4b89      	ldr	r3, [pc, #548]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d06c      	beq.n	800137c <HAL_RCC_OscConfig+0x12c>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d168      	bne.n	800137c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e24c      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012b6:	d106      	bne.n	80012c6 <HAL_RCC_OscConfig+0x76>
 80012b8:	4b80      	ldr	r3, [pc, #512]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a7f      	ldr	r2, [pc, #508]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	e02e      	b.n	8001324 <HAL_RCC_OscConfig+0xd4>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x98>
 80012ce:	4b7b      	ldr	r3, [pc, #492]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a7a      	ldr	r2, [pc, #488]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b78      	ldr	r3, [pc, #480]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a77      	ldr	r2, [pc, #476]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e01d      	b.n	8001324 <HAL_RCC_OscConfig+0xd4>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0xbc>
 80012f2:	4b72      	ldr	r3, [pc, #456]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a71      	ldr	r2, [pc, #452]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b6f      	ldr	r3, [pc, #444]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a6e      	ldr	r2, [pc, #440]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e00b      	b.n	8001324 <HAL_RCC_OscConfig+0xd4>
 800130c:	4b6b      	ldr	r3, [pc, #428]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a6a      	ldr	r2, [pc, #424]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b68      	ldr	r3, [pc, #416]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a67      	ldr	r2, [pc, #412]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 800131e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001322:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d013      	beq.n	8001354 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fcea 	bl	8000d04 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fce6 	bl	8000d04 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	@ 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e200      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	4b5d      	ldr	r3, [pc, #372]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0xe4>
 8001352:	e014      	b.n	800137e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fcd6 	bl	8000d04 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800135c:	f7ff fcd2 	bl	8000d04 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	@ 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e1ec      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	4b53      	ldr	r3, [pc, #332]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x10c>
 800137a:	e000      	b.n	800137e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d063      	beq.n	8001452 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800138a:	4b4c      	ldr	r3, [pc, #304]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00b      	beq.n	80013ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001396:	4b49      	ldr	r3, [pc, #292]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d11c      	bne.n	80013dc <HAL_RCC_OscConfig+0x18c>
 80013a2:	4b46      	ldr	r3, [pc, #280]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d116      	bne.n	80013dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ae:	4b43      	ldr	r3, [pc, #268]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_RCC_OscConfig+0x176>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d001      	beq.n	80013c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e1c0      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4b3d      	ldr	r3, [pc, #244]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4939      	ldr	r1, [pc, #228]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	e03a      	b.n	8001452 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d020      	beq.n	8001426 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e4:	4b36      	ldr	r3, [pc, #216]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7ff fc8b 	bl	8000d04 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f2:	f7ff fc87 	bl	8000d04 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e1a1      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	4b2a      	ldr	r3, [pc, #168]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4927      	ldr	r1, [pc, #156]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
 8001424:	e015      	b.n	8001452 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001426:	4b26      	ldr	r3, [pc, #152]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fc6a 	bl	8000d04 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001434:	f7ff fc66 	bl	8000d04 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e180      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d03a      	beq.n	80014d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d019      	beq.n	800149a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001466:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <HAL_RCC_OscConfig+0x274>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146c:	f7ff fc4a 	bl	8000d04 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001474:	f7ff fc46 	bl	8000d04 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e160      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001492:	2001      	movs	r0, #1
 8001494:	f000 fa9c 	bl	80019d0 <RCC_Delay>
 8001498:	e01c      	b.n	80014d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149a:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <HAL_RCC_OscConfig+0x274>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a0:	f7ff fc30 	bl	8000d04 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a6:	e00f      	b.n	80014c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a8:	f7ff fc2c 	bl	8000d04 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d908      	bls.n	80014c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e146      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	42420000 	.word	0x42420000
 80014c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c8:	4b92      	ldr	r3, [pc, #584]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1e9      	bne.n	80014a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80a6 	beq.w	800162e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10d      	bne.n	800150e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b88      	ldr	r3, [pc, #544]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a87      	ldr	r2, [pc, #540]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b85      	ldr	r3, [pc, #532]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800150a:	2301      	movs	r3, #1
 800150c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	4b82      	ldr	r3, [pc, #520]	@ (8001718 <HAL_RCC_OscConfig+0x4c8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d118      	bne.n	800154c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151a:	4b7f      	ldr	r3, [pc, #508]	@ (8001718 <HAL_RCC_OscConfig+0x4c8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a7e      	ldr	r2, [pc, #504]	@ (8001718 <HAL_RCC_OscConfig+0x4c8>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001526:	f7ff fbed 	bl	8000d04 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152e:	f7ff fbe9 	bl	8000d04 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	@ 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e103      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	4b75      	ldr	r3, [pc, #468]	@ (8001718 <HAL_RCC_OscConfig+0x4c8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d106      	bne.n	8001562 <HAL_RCC_OscConfig+0x312>
 8001554:	4b6f      	ldr	r3, [pc, #444]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4a6e      	ldr	r2, [pc, #440]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6213      	str	r3, [r2, #32]
 8001560:	e02d      	b.n	80015be <HAL_RCC_OscConfig+0x36e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x334>
 800156a:	4b6a      	ldr	r3, [pc, #424]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4a69      	ldr	r2, [pc, #420]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6213      	str	r3, [r2, #32]
 8001576:	4b67      	ldr	r3, [pc, #412]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a66      	ldr	r2, [pc, #408]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	6213      	str	r3, [r2, #32]
 8001582:	e01c      	b.n	80015be <HAL_RCC_OscConfig+0x36e>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b05      	cmp	r3, #5
 800158a:	d10c      	bne.n	80015a6 <HAL_RCC_OscConfig+0x356>
 800158c:	4b61      	ldr	r3, [pc, #388]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4a60      	ldr	r2, [pc, #384]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	6213      	str	r3, [r2, #32]
 8001598:	4b5e      	ldr	r3, [pc, #376]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4a5d      	ldr	r2, [pc, #372]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6213      	str	r3, [r2, #32]
 80015a4:	e00b      	b.n	80015be <HAL_RCC_OscConfig+0x36e>
 80015a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a5a      	ldr	r2, [pc, #360]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	f023 0301 	bic.w	r3, r3, #1
 80015b0:	6213      	str	r3, [r2, #32]
 80015b2:	4b58      	ldr	r3, [pc, #352]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a57      	ldr	r2, [pc, #348]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	f023 0304 	bic.w	r3, r3, #4
 80015bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d015      	beq.n	80015f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7ff fb9d 	bl	8000d04 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7ff fb99 	bl	8000d04 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e0b1      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0ee      	beq.n	80015ce <HAL_RCC_OscConfig+0x37e>
 80015f0:	e014      	b.n	800161c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fb87 	bl	8000d04 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff fb83 	bl	8000d04 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e09b      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001610:	4b40      	ldr	r3, [pc, #256]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ee      	bne.n	80015fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d105      	bne.n	800162e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001622:	4b3c      	ldr	r3, [pc, #240]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a3b      	ldr	r2, [pc, #236]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800162c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8087 	beq.w	8001746 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001638:	4b36      	ldr	r3, [pc, #216]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b08      	cmp	r3, #8
 8001642:	d061      	beq.n	8001708 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d146      	bne.n	80016da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164c:	4b33      	ldr	r3, [pc, #204]	@ (800171c <HAL_RCC_OscConfig+0x4cc>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fb57 	bl	8000d04 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff fb53 	bl	8000d04 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e06d      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166c:	4b29      	ldr	r3, [pc, #164]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001680:	d108      	bne.n	8001694 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001682:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	4921      	ldr	r1, [pc, #132]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001694:	4b1f      	ldr	r3, [pc, #124]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a19      	ldr	r1, [r3, #32]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	430b      	orrs	r3, r1
 80016a6:	491b      	ldr	r1, [pc, #108]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ac:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <HAL_RCC_OscConfig+0x4cc>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fb27 	bl	8000d04 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff fb23 	bl	8000d04 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e03d      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016cc:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x46a>
 80016d8:	e035      	b.n	8001746 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <HAL_RCC_OscConfig+0x4cc>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fb10 	bl	8000d04 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff fb0c 	bl	8000d04 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e026      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fa:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x498>
 8001706:	e01e      	b.n	8001746 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e019      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
 8001714:	40021000 	.word	0x40021000
 8001718:	40007000 	.word	0x40007000
 800171c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001720:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <HAL_RCC_OscConfig+0x500>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	429a      	cmp	r2, r3
 8001732:	d106      	bne.n	8001742 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40021000 	.word	0x40021000

08001754 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0d0      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001768:	4b6a      	ldr	r3, [pc, #424]	@ (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d910      	bls.n	8001798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	4b67      	ldr	r3, [pc, #412]	@ (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 0207 	bic.w	r2, r3, #7
 800177e:	4965      	ldr	r1, [pc, #404]	@ (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b63      	ldr	r3, [pc, #396]	@ (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0b8      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b0:	4b59      	ldr	r3, [pc, #356]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4a58      	ldr	r2, [pc, #352]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80017ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c8:	4b53      	ldr	r3, [pc, #332]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4a52      	ldr	r2, [pc, #328]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80017d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d4:	4b50      	ldr	r3, [pc, #320]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	494d      	ldr	r1, [pc, #308]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d040      	beq.n	8001874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b47      	ldr	r3, [pc, #284]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d115      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e07f      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001812:	4b41      	ldr	r3, [pc, #260]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e073      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001822:	4b3d      	ldr	r3, [pc, #244]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e06b      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001832:	4b39      	ldr	r3, [pc, #228]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f023 0203 	bic.w	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4936      	ldr	r1, [pc, #216]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001844:	f7ff fa5e 	bl	8000d04 <HAL_GetTick>
 8001848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	e00a      	b.n	8001862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184c:	f7ff fa5a 	bl	8000d04 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e053      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	4b2d      	ldr	r3, [pc, #180]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 020c 	and.w	r2, r3, #12
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	429a      	cmp	r2, r3
 8001872:	d1eb      	bne.n	800184c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001874:	4b27      	ldr	r3, [pc, #156]	@ (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d210      	bcs.n	80018a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b24      	ldr	r3, [pc, #144]	@ (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 0207 	bic.w	r2, r3, #7
 800188a:	4922      	ldr	r1, [pc, #136]	@ (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b20      	ldr	r3, [pc, #128]	@ (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e032      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b0:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4916      	ldr	r1, [pc, #88]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ce:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	490e      	ldr	r1, [pc, #56]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018e2:	f000 f821 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 80018e6:	4602      	mov	r2, r0
 80018e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	490a      	ldr	r1, [pc, #40]	@ (800191c <HAL_RCC_ClockConfig+0x1c8>)
 80018f4:	5ccb      	ldrb	r3, [r1, r3]
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	4a09      	ldr	r2, [pc, #36]	@ (8001920 <HAL_RCC_ClockConfig+0x1cc>)
 80018fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <HAL_RCC_ClockConfig+0x1d0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f9bc 	bl	8000c80 <HAL_InitTick>

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40022000 	.word	0x40022000
 8001918:	40021000 	.word	0x40021000
 800191c:	08001a7c 	.word	0x08001a7c
 8001920:	20000000 	.word	0x20000000
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	2300      	movs	r3, #0
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001942:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x94>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b04      	cmp	r3, #4
 8001950:	d002      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x30>
 8001952:	2b08      	cmp	r3, #8
 8001954:	d003      	beq.n	800195e <HAL_RCC_GetSysClockFreq+0x36>
 8001956:	e027      	b.n	80019a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001958:	4b19      	ldr	r3, [pc, #100]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800195a:	613b      	str	r3, [r7, #16]
      break;
 800195c:	e027      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	0c9b      	lsrs	r3, r3, #18
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	4a17      	ldr	r2, [pc, #92]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001968:	5cd3      	ldrb	r3, [r2, r3]
 800196a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d010      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001976:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x94>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	0c5b      	lsrs	r3, r3, #17
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	4a11      	ldr	r2, [pc, #68]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a0d      	ldr	r2, [pc, #52]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800198a:	fb03 f202 	mul.w	r2, r3, r2
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	fbb2 f3f3 	udiv	r3, r2, r3
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e004      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a0c      	ldr	r2, [pc, #48]	@ (80019cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800199c:	fb02 f303 	mul.w	r3, r2, r3
 80019a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	613b      	str	r3, [r7, #16]
      break;
 80019a6:	e002      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80019aa:	613b      	str	r3, [r7, #16]
      break;
 80019ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ae:	693b      	ldr	r3, [r7, #16]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	007a1200 	.word	0x007a1200
 80019c4:	08001a8c 	.word	0x08001a8c
 80019c8:	08001a9c 	.word	0x08001a9c
 80019cc:	003d0900 	.word	0x003d0900

080019d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <RCC_Delay+0x34>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <RCC_Delay+0x38>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	0a5b      	lsrs	r3, r3, #9
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019ec:	bf00      	nop
  }
  while (Delay --);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	1e5a      	subs	r2, r3, #1
 80019f2:	60fa      	str	r2, [r7, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f9      	bne.n	80019ec <RCC_Delay+0x1c>
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	20000000 	.word	0x20000000
 8001a08:	10624dd3 	.word	0x10624dd3

08001a0c <memset>:
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4402      	add	r2, r0
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d100      	bne.n	8001a16 <memset+0xa>
 8001a14:	4770      	bx	lr
 8001a16:	f803 1b01 	strb.w	r1, [r3], #1
 8001a1a:	e7f9      	b.n	8001a10 <memset+0x4>

08001a1c <__libc_init_array>:
 8001a1c:	b570      	push	{r4, r5, r6, lr}
 8001a1e:	2600      	movs	r6, #0
 8001a20:	4d0c      	ldr	r5, [pc, #48]	@ (8001a54 <__libc_init_array+0x38>)
 8001a22:	4c0d      	ldr	r4, [pc, #52]	@ (8001a58 <__libc_init_array+0x3c>)
 8001a24:	1b64      	subs	r4, r4, r5
 8001a26:	10a4      	asrs	r4, r4, #2
 8001a28:	42a6      	cmp	r6, r4
 8001a2a:	d109      	bne.n	8001a40 <__libc_init_array+0x24>
 8001a2c:	f000 f81a 	bl	8001a64 <_init>
 8001a30:	2600      	movs	r6, #0
 8001a32:	4d0a      	ldr	r5, [pc, #40]	@ (8001a5c <__libc_init_array+0x40>)
 8001a34:	4c0a      	ldr	r4, [pc, #40]	@ (8001a60 <__libc_init_array+0x44>)
 8001a36:	1b64      	subs	r4, r4, r5
 8001a38:	10a4      	asrs	r4, r4, #2
 8001a3a:	42a6      	cmp	r6, r4
 8001a3c:	d105      	bne.n	8001a4a <__libc_init_array+0x2e>
 8001a3e:	bd70      	pop	{r4, r5, r6, pc}
 8001a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a44:	4798      	blx	r3
 8001a46:	3601      	adds	r6, #1
 8001a48:	e7ee      	b.n	8001a28 <__libc_init_array+0xc>
 8001a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a4e:	4798      	blx	r3
 8001a50:	3601      	adds	r6, #1
 8001a52:	e7f2      	b.n	8001a3a <__libc_init_array+0x1e>
 8001a54:	08001aa0 	.word	0x08001aa0
 8001a58:	08001aa0 	.word	0x08001aa0
 8001a5c:	08001aa0 	.word	0x08001aa0
 8001a60:	08001aa4 	.word	0x08001aa4

08001a64 <_init>:
 8001a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a66:	bf00      	nop
 8001a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a6a:	bc08      	pop	{r3}
 8001a6c:	469e      	mov	lr, r3
 8001a6e:	4770      	bx	lr

08001a70 <_fini>:
 8001a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a72:	bf00      	nop
 8001a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a76:	bc08      	pop	{r3}
 8001a78:	469e      	mov	lr, r3
 8001a7a:	4770      	bx	lr
